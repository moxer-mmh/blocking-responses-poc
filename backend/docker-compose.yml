services:
  # Main API service
  api:
    build: .
    container_name: blocking-responses-api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Required - set your OpenAI API key
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Optional configuration
      - DEFAULT_MODEL=${DEFAULT_MODEL:-gpt-4o-mini}
      - JUDGE_MODEL=${JUDGE_MODEL:-gpt-4o-mini}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DELAY_TOKENS=${DELAY_TOKENS:-20}
      - DELAY_MS=${DELAY_MS:-250}
      - RISK_THRESHOLD=${RISK_THRESHOLD:-0.9}
      - JUDGE_THRESHOLD=${JUDGE_THRESHOLD:-0.8}
      - ENABLE_JUDGE=${ENABLE_JUDGE:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:80}
    volumes:
      # Mount source for development (comment out for production)
      - ./app.py:/app/app.py
      - ./.env:/app/.env:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Modern React frontend
  frontend:
    build: ./frontend
    container_name: compliance-dashboard-frontend
    ports:
      - "80:80"
      - "443:443"  # For future SSL setup
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Legacy web interface (static files)
  web:
    image: nginx:alpine
    container_name: blocking-responses-web-legacy
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - legacy  # Only start with --profile legacy

  # Optional: Redis for shared metrics (multi-instance deployments)
  redis:
    image: redis:7-alpine
    container_name: blocking-responses-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - redis  # Only start with --profile redis

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: blocking-responses-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: blocking-responses-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: blocking-responses-network